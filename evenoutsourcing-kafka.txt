Microservices with event out souecing using kafka MQ server

1. download Apache Kafka from https://kafka.apache.org/downloads. It comes in a tar or zip file. unzip the file in any directory you wish
2. Zookeeper is a service registry which comes bundled with kafka now. 
3. After extraction kafka-x.x folder will be created. Go in  kafka directory  on command line 

4. start zookeepar as 

bin/zookeeper-server-start.sh config/zookeeper.properties

5. Start Kafka MQ

bin/kafka-server-start.sh config/server.properties

6. create topics


a) bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic checkingacct-topic

b) bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic savingsacct-topic
 
 
7. Dependencies in pom file

<dependency>
<groupId>fish.payara.cloud.connectors.kafka</groupId>
<artifactId>kafka-rar</artifactId>
<version>0.3.0</version>
<type>rar</type>
</dependency>
<dependency>
<groupId>fish.payara.cloud.connectors.kafka</groupId>
<artifactId>kafka-jca-api</artifactId>
<version>0.3.0</version>
<scope>provided</scope>
</dependency>
 <dependency>
 <dependency>
    <groupId>javax.json.bind</groupId>
    <artifactId>javax.json.bind-api</artifactId>
    <version>1.0</version>
</dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-api</artifactId>
            <version>${jakartaee}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>common</artifactId>
            <version>${project.version}</version>
        </dependency>
       
        <dependency>
          <groupId>javax.persistence</groupId>
          <artifactId>javax.persistence-api</artifactId>
         <version>2.2</version>
        </dependency>

maven plugins 

<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-dependency-plugin</artifactId>
<version>3.1.1</version>
<executions>
<execution>
<id>copy-dependencies</id>
<phase>package</phase>
<goals>
<goal>copy-dependencies</goal>
</goals>
</execution>
</executions>
</plugin>




=============== Programming

// creating naming for Kafka server
import javax.enterprise.context.ApplicationScoped;
import javax.resource.ConnectionFactoryDefinition;

/**
 *
 * @author root
 */
@ApplicationScoped
@ConnectionFactoryDefinition (
name = "java:app/kafka/factory",
interfaceName = "fish.payara.cloud.connectors.kafka.KafkaConnectionFactory",
resourceAdapter= "kafka-rar-0.1.0"
)
public class Config {
    
}


// sending message to  Kafka server in the predefined topic.

 @Resource(lookup = "java:app/kafka/factory")
    private KafkaConnectionFactory kafkaConnectionFactory;

private void sendCheckingMessage(FundTransferDTO fundTransferDTO) {
        String fundTransferDTOJson;

        fundTransferDTOJson = FundTransferDTOUtil.fundTransferDTOToJson(fundTransferDTO);

        try (KafkaConnection kafkaConnection = kafkaConnectionFactory.createConnection()) {
            kafkaConnection.send(new ProducerRecord("checkingacct-topic",
                    fundTransferDTOJson));
            System.out.println("Tranfer message send to checking acct topic");
        } catch (Exception ex) {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        }
    }



================== Using a messaging bean o get the message=========================


@MessageDriven(activationConfig = {
    @ActivationConfigProperty(propertyName = "clientId", propertyValue = "checkingAcctFundTransferListener")
    ,
    @ActivationConfigProperty(propertyName = "groupIdConfig", propertyValue = "fundTransfer")
    ,
    @ActivationConfigProperty(propertyName = "topics", propertyValue = "checkingacct-topic")
    ,
    @ActivationConfigProperty(propertyName = "bootstrapServersConfig", propertyValue = "localhost:9092")
    ,   
    @ActivationConfigProperty(propertyName = "autoCommitInterval", propertyValue = "100")
    ,   
    @ActivationConfigProperty(propertyName = "retryBackoff", propertyValue = "1000")
    ,   
    @ActivationConfigProperty(propertyName = "keyDeserializer", propertyValue = "org.apache.kafka.common.serialization.StringDeserializer")
    ,   
    @ActivationConfigProperty(propertyName = "valueDeserializer", propertyValue = "org.apache.kafka.common.serialization.StringDeserializer")
    ,   
    @ActivationConfigProperty(propertyName = "pollInterval", propertyValue = "1000"),})
public class CheckingFundTransferListener implements KafkaListener {

    private static final Logger LOGGER = Logger.getLogger(CheckingFundTransferListener.class.getName());

    //@Resource(lookup = "java:comp/env/KafkaConnectionFactory")
     @Resource(lookup = "java:app/kafka/factory")
    private KafkaConnectionFactory kafkaConnectionFactory;

    @Inject
    private CheckingAcctMgr checkingAcctMgr;

    @OnRecord(topics = {"checkingacct-topic"})  // This method  picks up messages from Kafka topic
    public void transferFunds(ConsumerRecord consumerRecord) {  // Json converted to Java object automatically
    
    
    
    
        String fundTransferDTOJson = (String) consumerRecord.value();
        FundTransferDTO fundTransferDTO = FundTransferDTOUtil.jsonToFundTransferDTO(fundTransferDTOJson);
        System.out.println("got transfer message : "+ fundTransferDTOJson.toString());
        if (fundTransferDTO.getSourceAcctType().equals(AccountType.CHECKING)) {
            LOGGER.log(Level.INFO, String.format("Withdrawing %.2f currency units from checking", fundTransferDTO.getAmt()));
             System.out.println("Withdrawing 100 Rs currency units from checking : ");
      
            
            if (checkingAcctMgr.withdrawFunds(fundTransferDTO)) {
                try (KafkaConnection kafkaConnection = kafkaConnectionFactory.createConnection()) {
                    kafkaConnection.send(new ProducerRecord("savingsacct-topic", fundTransferDTOJson));
                    System.out.println("Send message to saving accts"+fundTransferDTOJson.toString());
                } catch (Exception ex) {
                    Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                //LOGGER.log(Level.WARNING, "There was a problem withdrawing funds from checking account, aborting transfer.");
                System.out.println("There was a problem withdrawing funds from checking account, aborting transfer.");
            }
        } else if (fundTransferDTO.getDestAcctType().equals(AccountType.CHECKING)) {
           // LOGGER.log(Level.INFO, String.format("Depositing %.2f currency units to checking", fundTransferDTO.getAmt()));
                  System.out.println("Depositing 100 currency units to checking");
        
           checkingAcctMgr.depositFunds(fundTransferDTO);
        }
    }
}



Running the project on payara micro in different terminals

java -jar payara-micro-5.194.jar --deploy eventoutsourcing/dependency/kafka-rar-0.1.0.rar --deploy eventoutsourcing/EventSourcingProject/savings-acct-service/target/savings-acct-service-1.0 --port 9080  --noCluster  --addlibs mysql-connector-java-5.1.47-bin.jar --domainconfig domain.xml

java -jar payara-micro-5.194.jar --deploy eventoutsourcing/dependency/kafka-rar-0.1.0.rar --deploy eventoutsourcing/EventSourcingProject/checking-acct-service/target/checking-acct-service-1.0 --port 9070  --noCluster  --addlibs mysql-connector-java-5.1.47-bin.jar --domainconfig domain.xml

java -jar payara-micro-5.194.jar --deploy eventoutsourcing/dependency/kafka-rar-0.1.0.rar --deploy eventoutsourcing/EventSourcingProject/fundtransferui/target/fundtransferui-1.0 --port 9060  --noCluster  --addlibs mysql-connector-java-5.1.47-bin.jar --domainconfig domain.xml

use http://localhost:9060/fundtranderui



